@{
    ViewData["Title"] = "";
}

<h1>@ViewData["Title"]</h1>
<br />
<br />

    <h1 style="text-align:center;">PASSENGERS TASKS AND INFORMATION</h1>
<h5 style="text-align:center;">What every passenger needs to know and carry with them</h5>
 <div class="list" id="myForm">
		<h2>TRAVEL DOCUMENTS</h2>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Valid Pasport *</span>
		</label>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Valid VISA</span>
		</label>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Valid National ID Card *</span>
		</label>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Valid Nexus Card</span>
		</label>
	<label>
		<input type="checkbox" name="">
		<i></i>
		<span>Valid Paid Flight Tax *</span>
	</label>
		<br/>
		<h2>HEALTH TRAVEL DOCUMENTS</h2>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Yellow Fever Vaccination Certificate</span>
		</label>
		<label>
		<input type="checkbox" name="">
		<i></i>
		<span>COVID-19 Travel Document</span>
	</label>
	<label>
			<input type="checkbox" name="">
			<i></i>
			<span>IATA Timatic Widget</span>
		</label>
		<br />
		<h2>TRAVEL ITINERARY DETAILS</h2>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Flight Ticket Details *</span>
		</label>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Accommodation Reservation</span>
		</label>
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Car Rental Confirmation</span>
		</label>
		<br />
		<label>
			<input type="checkbox" name="">
			<i></i>
			<span>Other Documents</span>
		</label>

		<br />
		<label>
			<input type="input" name="" style="border: none; border-radius: 5px;">
			<span>Flight Number</span>
		</label>
		<label>
		<input type="input" name="" style="border: none; border-radius: 5px;">
		<span>First Name</span>
	</label>
	<label>
	<input type="input" name="" style="border: none; border-radius: 5px;">
	<span>Last Name</span>
	</label>
		<label>
			<input type="input" name="" style="border: none; border-radius: 5px;">
			<span>Passport Number</span>
		</label>
		<label>
			<input type="input" name="" style="border: none; border-radius: 5px;" placeholder="Travel From">
			<span>Destination From</span>
		</label>
		<label>
			<input type="input" name="" style="border: none; border-radius: 5px;" placeholder="Travel To">
			<span>Destination To</span>
		</label>
		<br />
		<h5 style="color: #fff;">Addition Information - Image</h5>
	<h6 style="color: #fff;">Passport Image Requirement (2 x 2 inches (51 x 51 mm))</h6>
	<h6 style="color: #fff;">Head must be between 1 -1 3/8 inches (25 - 35 mm) from the bottom of the chin to the top of the head.</h6>
	<br />

	<div id="loader-overlay">
  <div class="loader">
    <i class="fas fa-plane"></i> <!-- Custom plane icon -->
  </div>
</div>

<div id="drag-drop-container">
  <div id="drop-area">
    <p>Drag and drop an image here</p>
  </div>
  <br/>
  <input type="file" id="file-input">
  <div id="preview-container"></div>
  <br />
</div>


</div>
	<button id="myButton myBtn" onclick="handleButtonClick()" style="background-color: #03A9F4; color: #fff; border: none; border-radius: 3px;  width: 100%;  height: 50px; font-weight: 400;  font-size: 20px;">Submit</button>
	
	@*Image Upload*@
		<script>  
const dropArea = document.getElementById('drop-area');
const fileInput = document.getElementById('file-input');
const previewContainer = document.getElementById('preview-container');

// Prevent default drag behaviors
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, preventDefaults, false);
  document.body.addEventListener(eventName, preventDefaults, false);
});

// Highlight drop area when an item is dragged over it
['dragenter', 'dragover'].forEach(eventName => {
  dropArea.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, unhighlight, false);
});

// Handle dropped files
dropArea.addEventListener('drop', handleDrop, false);

// Handle file selection from file input
fileInput.addEventListener('change', handleFiles, false);

function preventDefaults(event) {
  event.preventDefault();
  event.stopPropagation();
}

function highlight() {
  dropArea.classList.add('highlight');
}

function unhighlight() {
  dropArea.classList.remove('highlight');
}

function handleDrop(event) {
  const files = event.dataTransfer.files;
  handleFiles(files);
}

function handleFiles(files) {
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    if (file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = function(event) {
        const image = new Image();
        image.src = event.target.result;
        image.classList.add('preview-image');
        previewContainer.appendChild(image);
      };
      reader.readAsDataURL(file);
    }
  }
}

</script>  